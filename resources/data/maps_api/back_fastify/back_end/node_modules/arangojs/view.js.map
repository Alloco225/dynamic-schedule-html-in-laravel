{"version":3,"file":"view.js","sourceRoot":"","sources":["../src/view.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * ```ts\n * import type { ArangoSearchView } from \"arangojs/view\";\n * ```\n *\n * The \"view\" module provides View related types and interfaces for TypeScript.\n *\n * @packageDocumentation\n */\nimport { ArangoResponseMetadata, Dict } from \"./connection\";\nimport { Database } from \"./database\";\nimport { isArangoError } from \"./error\";\nimport { VIEW_NOT_FOUND } from \"./lib/codes\";\n\n/**\n * String values indicating the View type.\n */\nexport enum ViewType {\n  ARANGOSEARCH_VIEW = \"arangosearch\",\n}\n\n/**\n * Indicates whether the given value represents a {@link View}.\n *\n * @param view - A value that might be a View.\n */\nexport function isArangoView(view: any): view is View {\n  return Boolean(view && view.isArangoView);\n}\n\n/**\n * Generic description of a View.\n */\nexport type ViewDescription = {\n  /**\n   * A globally unique identifier for this View.\n   */\n  globallyUniqueId: string;\n  /**\n   * An identifier for this View.\n   */\n  id: string;\n  /**\n   * Name of the View.\n   */\n  name: string;\n  /**\n   * Type of the View.\n   */\n  type: ViewType;\n};\n\n/**\n * A link definition for an ArangoSearch View.\n */\nexport type ArangoSearchViewLink = {\n  /**\n   * A list of names of Analyzers to apply to values of processed document\n   * attributes.\n   *\n   * Default: `[\"identity\"]`\n   */\n  analyzers?: string[];\n  /**\n   * An object mapping names of attributes to process for each document to\n   * {@link ArangoSearchViewLink} definitions.\n   */\n  fields?: Dict<ArangoSearchViewLink | undefined>;\n  /**\n   * If set to `true`, all document attributes will be processed, otherwise\n   * only the attributes in `fields` will be processed.\n   *\n   * Default: `false`\n   */\n  includeAllFields?: boolean;\n  /**\n   * If set to `true`, the position of values in array values will be tracked,\n   * otherwise all values in an array will be treated as equal alternatives.\n   */\n  trackListPositions?: boolean;\n  /**\n   * Controls how the view should keep track of the attribute values.\n   *\n   * Default: `\"none\"`\n   */\n  storeValues?: \"none\" | \"id\";\n};\n\n/**\n * Properties of an ArangoSearch View.\n */\nexport type ArangoSearchViewProperties = {\n  /**\n   * How many commits to wait between removing unused files.\n   */\n  cleanupIntervalStep: number;\n  /**\n   * How long to wait between applying the `consolidationPolicy`.\n   */\n  consolidationIntervalMsec: number;\n  /**\n   * Maximum number of writers cached in the pool.\n   */\n  writebufferIdle: number;\n  /**\n   * Maximum number of concurrent active writers that perform a transaction.\n   */\n  writebufferActive: number;\n  /**\n   * Maximum memory byte size per writer before a writer flush is triggered.\n   */\n  writebufferSizeMax: number;\n  /**\n   * Consolidation policy to apply for selecting which segments should be\n   * merged.\n   */\n  consolidationPolicy: BytesAccumConsolidationPolicy | TierConsolidationPolicy;\n  /**\n   * Attribute path (`field`) for the value of each document that is\n   * used for sorting.\n   */\n  primarySort: {\n    /**\n     * Attribute path for the value of each document used for\n     * sorting.\n     */\n    field: string;\n    /**\n     * If set to `\"asc\"`, the primary sorting order is ascending.\n     * If set to `\"desc\"`, the primary sorting order is descending.\n     */\n    direction: \"desc\" | \"asc\";\n  }[];\n  /**\n   * Compression to use for the primary sort data.\n   *\n   * Default: `\"lz4\"`\n   */\n  primarySortCompression: PrimarySortCompression;\n  /**\n   * Attribute paths for which values should be stored in the view index\n   * in addition to those used for sorting via `primarySort`.\n   */\n  storedValues: {\n    /**\n     * Attribute paths for which values should be stored in the view index\n     * in addition to those used for sorting via `primarySort`.\n     */\n    fields: string[];\n  }[];\n  /**\n   * An object mapping names of linked collections to\n   * {@link ArangoSearchViewLink} definitions.\n   */\n  links: Dict<ArangoSearchViewLink | undefined>;\n};\n\n/**\n * Policy to consolidate based on segment byte size and live document count as\n * dictated by the customization attributes.\n */\nexport type BytesAccumConsolidationPolicy = {\n  /**\n   * Type of consolidation policy.\n   */\n  type: \"bytes_accum\";\n  /**\n   * Must be in the range of `0.0` to `1.0`.\n   */\n  threshold?: number;\n};\n\n/**\n * Policy to consolidate if the sum of all candidate segment byte size is less\n * than the total segment byte size multiplied by a given threshold.\n */\nexport type TierConsolidationPolicy = {\n  /**\n   * Type of consolidation policy.\n   */\n  type: \"tier\";\n  /**\n   * Minimum number of segments that will be evaluated as candidates\n   * for consolidation.\n   *\n   * Default: `1`\n   */\n  segmentsMin?: number;\n  /**\n   * Maximum number of segments that will be evaluated as candidates\n   * for consolidation.\n   *\n   * Default: `10`\n   */\n  segmentsMax?: number;\n  /**\n   * Maximum allowed size of all consolidated segments.\n   *\n   * Default: `5368709120`, i.e. 5 GiB\n   */\n  segmentsBytesMax?: number;\n  /**\n   * Defines the value to treat all smaller segments as equal for\n   * consolidation selection.\n   *\n   * Default: `2097152`, i.e. 2 MiB\n   */\n  segmentsBytesFloor?: number;\n  /**\n   * Minimum score.\n   */\n  minScore?: number;\n};\n\n/**\n * Compression to use for primary sort data of a View.\n *\n * Default: `\"lz4\"`\n */\nexport type PrimarySortCompression = \"lz4\" | \"none\";\n\n/**\n * Properties of an ArangoSearch View.\n */\nexport type ArangoSearchViewPropertiesOptions = {\n  /**\n   * How many commits to wait between removing unused files.\n   *\n   * Default: `2`\n   */\n  cleanupIntervalStep?: number;\n  /**\n   * How long to wait between applying the `consolidationPolicy`.\n   *\n   * Default: `10000`\n   */\n  consolidationIntervalMsec?: number;\n  /**\n   * How long to wait between commiting View data store changes and making\n   * documents visible to queries.\n   *\n   * Default: `1000`\n   */\n  commitIntervalMsec?: number;\n  /**\n   * Maximum number of writers cached in the pool.\n   *\n   * Default: `64`\n   */\n  writebufferIdle?: number;\n  /**\n   * Maximum number of concurrent active writers that perform a transaction.\n   *\n   * Default: `0`\n   */\n  writebufferActive?: number;\n  /**\n   * Maximum memory byte size per writer before a writer flush is triggered.\n   *\n   * Default: `33554432`, i.e. 32 MiB\n   */\n  writebufferSizeMax?: number;\n  /**\n   * Consolidation policy to apply for selecting which segments should be\n   * merged.\n   */\n  consolidationPolicy?: BytesAccumConsolidationPolicy | TierConsolidationPolicy;\n  /**\n   * Attribute path (`field`) for the value of each document that will be\n   * used for sorting.\n   *\n   * If `direction` is set to `\"asc\"` or `asc` is set to `true`,\n   * the primary sorting order will be ascending.\n   *\n   * If `direction` is set to `\"desc\"` or `asc` is set to `false`,\n   * the primary sorting order will be descending.\n   */\n  primarySort?: (\n    | {\n        /**\n         * Attribute path for the value of each document to use for\n         * sorting.\n         */\n        field: string;\n        /**\n         * If set to `\"asc\"`, the primary sorting order will be ascending.\n         * If set to `\"desc\"`, the primary sorting order will be descending.\n         */\n        direction: \"desc\" | \"asc\";\n      }\n    | {\n        /**\n         * Attribute path for the value of each document to use for\n         * sorting.\n         */\n        field: string;\n        /**\n         * If set to `true`, the primary sorting order will be ascending.\n         * If set to `false`, the primary sorting order will be descending.\n         */\n        asc: boolean;\n      }\n  )[];\n  /**\n   * Compression to use for the primary sort data.\n   *\n   * Default: `\"lz4\"`\n   */\n  primarySortCompression?: PrimarySortCompression;\n  /**\n   * Attribute paths for which values should be stored in the view index\n   * in addition to those used for sorting via `primarySort`.\n   */\n  storedValues?: {\n    /**\n     * Attribute paths for which values should be stored in the view index\n     * in addition to those used for sorting via `primarySort`.\n     */\n    fields: string[];\n  }[];\n  /**\n   * An object mapping names of linked collections to\n   * {@link ArangoSearchViewLink} definitions.\n   */\n  links?: Dict<ArangoSearchViewLink | undefined>;\n};\n\n/**\n * Represents a View in a {@link Database}.\n *\n * See {@link ArangoSearchView} for the concrete type representing an\n * ArangoSearch View.\n */\nexport class View<\n  PropertiesOptions extends object = any,\n  Properties extends object = any\n> {\n  protected _name: string;\n  protected _db: Database;\n\n  /**\n   * @internal\n   * @hidden\n   */\n  constructor(db: Database, name: string) {\n    this._db = db;\n    this._name = name;\n  }\n\n  /**\n   * @internal\n   *\n   * Indicates that this object represents an ArangoDB View.\n   */\n  get isArangoView(): true {\n    return true;\n  }\n\n  /**\n   * Name of the View.\n   */\n  get name() {\n    return this._name;\n  }\n\n  /**\n   * Retrieves general information about the View.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const view = db.view(\"some-view\");\n   * const data = await view.get();\n   * // data contains general information about the View\n   * ```\n   */\n  get(): Promise<ViewDescription & ArangoResponseMetadata> {\n    return this._db.request(\n      { path: `/_api/view/${this.name}` },\n      (res) => res.body\n    );\n  }\n\n  /**\n   * Checks whether the View exists.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const view = db.view(\"some-view\");\n   * const exists = await view.exists();\n   * console.log(exists); // indicates whether the View exists\n   * ```\n   */\n  async exists(): Promise<boolean> {\n    try {\n      await this.get();\n      return true;\n    } catch (err) {\n      if (isArangoError(err) && err.errorNum === VIEW_NOT_FOUND) {\n        return false;\n      }\n      throw err;\n    }\n  }\n\n  /**\n   * Creates a View with the given `options` and the instance's name.\n   *\n   * See also {@link Database.createView}.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const view = db.view(\"potatoes\");\n   * await view.create();\n   * // the ArangoSearch View \"potatoes\" now exists\n   * ```\n   */\n  create(\n    options?: PropertiesOptions & { type: ViewType }\n  ): Promise<ViewDescription & Properties> {\n    return this._db.request(\n      {\n        method: \"POST\",\n        path: \"/_api/view\",\n        body: {\n          type: ViewType.ARANGOSEARCH_VIEW,\n          ...(options || {}),\n          name: this.name,\n        },\n      },\n      (res) => res.body\n    );\n  }\n\n  /**\n   * Renames the View and updates the instance's `name` to `newName`.\n   *\n   * Additionally removes the instance from the {@link Database}'s internal\n   * cache.\n   *\n   * **Note**: Renaming Views may not be supported when ArangoDB is\n   * running in a cluster configuration.\n   *\n   * @param newName - The new name of the View.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const view1 = db.view(\"some-view\");\n   * await view1.rename(\"other-view\");\n   * const view2 = db.view(\"some-view\");\n   * const view3 = db.view(\"other-view\");\n   * // Note all three View instances are different objects but\n   * // view1 and view3 represent the same ArangoDB view!\n   * ```\n   */\n  async rename(\n    newName: string\n  ): Promise<ViewDescription & ArangoResponseMetadata> {\n    const result = this._db.renameView(this._name, newName);\n    this._name = newName;\n    return result;\n  }\n\n  /**\n   * Retrieves the View's properties.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const view = db.view(\"some-view\");\n   * const data = await view.properties();\n   * // data contains the View's properties\n   * ```\n   */\n  properties(): Promise<ViewDescription & Properties & ArangoResponseMetadata> {\n    return this._db.request(\n      { path: `/_api/view/${this.name}/properties` },\n      (res) => res.body\n    );\n  }\n\n  /**\n   * Updates the properties of the View.\n   *\n   * @param properties - Properties of the View to update.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const view = db.view(\"some-view\");\n   * const result = await view.updateProperties({\n   *   consolidationIntervalMsec: 234\n   * });\n   * console.log(result.consolidationIntervalMsec); // 234\n   * ```\n   */\n  updateProperties(\n    properties?: PropertiesOptions\n  ): Promise<ViewDescription & Properties> {\n    return this._db.request(\n      {\n        method: \"PATCH\",\n        path: `/_api/view/${this.name}/properties`,\n        body: properties || {},\n      },\n      (res) => res.body\n    );\n  }\n\n  /**\n   * Replaces the properties of the View.\n   *\n   * @param properties - New properties of the View.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const view = db.view(\"some-view\");\n   * const result = await view.replaceProperties({\n   *   consolidationIntervalMsec: 234\n   * });\n   * console.log(result.consolidationIntervalMsec); // 234\n   * ```\n   */\n  replaceProperties(\n    properties?: PropertiesOptions\n  ): Promise<ViewDescription & Properties> {\n    return this._db.request(\n      {\n        method: \"PUT\",\n        path: `/_api/view/${this.name}/properties`,\n        body: properties || {},\n      },\n      (res) => res.body\n    );\n  }\n\n  /**\n   * Deletes the View from the database.\n   *\n   * @example\n   *\n   * ```js\n   * const db = new Database();\n   * const view = db.view(\"some-view\");\n   * await view.drop();\n   * // the View \"some-view\" no longer exists\n   * ```\n   */\n  drop(): Promise<boolean> {\n    return this._db.request(\n      {\n        method: \"DELETE\",\n        path: `/_api/view/${this.name}`,\n      },\n      (res) => res.body.result\n    );\n  }\n}\n\n/**\n * Represents an ArangoSearch View in a {@link Database}.\n */\nexport interface ArangoSearchView\n  extends View<\n    ArangoSearchViewPropertiesOptions,\n    ArangoSearchViewProperties & { type: ViewType.ARANGOSEARCH_VIEW }\n  > {}\n"]}