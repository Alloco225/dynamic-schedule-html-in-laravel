{"version":3,"file":"indexes.js","sourceRoot":"","sources":["../src/indexes.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;GAgBG;;;AAyVH;;;GAGG;AACH,SAAgB,YAAY,CAC1B,QAAuB,EACvB,cAAsB;IAEtB,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE;QAChC,IAAI,QAAQ,CAAC,EAAE,EAAE;YACf,OAAO,YAAY,CAAC,QAAQ,CAAC,EAAE,EAAE,cAAc,CAAC,CAAC;SAClD;QACD,MAAM,IAAI,KAAK,CACb,iEAAiE,CAClE,CAAC;KACH;IACD,IAAI,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;QAC1B,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,GAAG,cAAc,GAAG,CAAC,EAAE;YAC9C,MAAM,IAAI,KAAK,CACb,aAAa,QAAQ,qCAAqC,cAAc,GAAG,CAC5E,CAAC;SACH;QACD,OAAO,QAAQ,CAAC;KACjB;IACD,OAAO,GAAG,cAAc,IAAI,QAAQ,EAAE,CAAC;AACzC,CAAC;AArBD,oCAqBC","sourcesContent":["/**\n * ```ts\n * import type {\n *   FulltextIndex,\n *   GeoIndex,\n *   HashIndex,\n *   PersistentIndex,\n *   PrimaryIndex,\n *   SkiplistIndex,\n *   TtlIndex,\n * } from \"arangojs/indexes\";\n * ```\n *\n * The \"indexes\" module provides index-related types for TypeScript.\n *\n * @packageDocumentation\n */\n\n/**\n * (MMFiles only.) Options for creating a hash index.\n *\n * When using the RocksDB storage engine, this index type behaves identically\n * to {@link EnsurePersistentIndexOptions}.\n */\nexport type EnsureHashIndexOptions = {\n  /**\n   * Type of this index.\n   */\n  type: \"hash\";\n  /**\n   * An array of attribute paths.\n   */\n  fields: string[];\n  /**\n   * A unique name for this index.\n   */\n  name?: string;\n  /**\n   * If set to `true`, a unique index will be created.\n   *\n   * Default: `false`\n   */\n  unique?: boolean;\n  /**\n   * If set to `true`, the index will omit documents that do not contain at\n   * least one of the attribute paths in `fields` and these documents will be\n   * ignored for uniqueness checks.\n   *\n   * Default: `false`\n   */\n  sparse?: boolean;\n  /**\n   * If set to `false`, array values will not be deduplicated.\n   *\n   * Default: `true`\n   */\n  deduplicate?: boolean;\n  /**\n   * If set to `false`, index selectivity estimates will be disabled for this\n   * index.\n   *\n   * Default: `true`\n   */\n  estimates?: boolean;\n};\n\n/**\n * (MMFiles only.) Options for creating a skiplist index.\n *\n * When using the RocksDB storage engine, this index type behaves identically\n * to {@link EnsurePersistentIndexOptions}.\n */\nexport type EnsureSkiplistIndexOptions = {\n  /**\n   * Type of this index.\n   */\n  type: \"skiplist\";\n  /**\n   * An array of attribute paths.\n   */\n  fields: string[];\n  /**\n   * A unique name for this index.\n   */\n  name?: string;\n  /**\n   * If set to `true`, a unique index will be created.\n   *\n   * Default: `false`\n   */\n  unique?: boolean;\n  /**\n   * If set to `true`, the index will omit documents that do not contain at\n   * least one of the attribute paths in `fields` and these documents will be\n   * ignored for uniqueness checks.\n   *\n   * Default: `false`\n   */\n  sparse?: boolean;\n  /**\n   * If set to `false`, array values will not be deduplicated.\n   *\n   * Default: `true`\n   */\n  deduplicate?: boolean;\n  /**\n   * If set to `false`, index selectivity estimates will be disabled for this\n   * index.\n   *\n   * Default: `true`\n   */\n  estimates?: boolean;\n};\n\n/**\n * Options for creating a persistent index.\n */\nexport type EnsurePersistentIndexOptions = {\n  /**\n   * Type of this index.\n   */\n  type: \"persistent\";\n  /**\n   * An array of attribute paths.\n   */\n  fields: string[];\n  /**\n   * A unique name for this index.\n   */\n  name?: string;\n  /**\n   * If set to `true`, a unique index will be created.\n   *\n   * Default: `false`\n   */\n  unique?: boolean;\n  /**\n   * If set to `true`, the index will omit documents that do not contain at\n   * least one of the attribute paths in `fields` and these documents will be\n   * ignored for uniqueness checks.\n   *\n   * Default: `false`\n   */\n  sparse?: boolean;\n  /**\n   * If set to `false`, index selectivity estimates will be disabled for this\n   * index.\n   *\n   * Default: `true`\n   */\n  estimates?: boolean;\n};\n\n/**\n * Options for creating a geo index.\n */\nexport type EnsureGeoIndexOptions =\n  | {\n      type: \"geo\";\n      /**\n       * If set to `true`, `fields` must be an array containing a single attribute\n       * path and the attribute value must be an array with two values, the first\n       * of which will be interpreted as the longitude and the second of which will\n       * be interpreted as the latitude of the document.\n       *\n       * Default: `false`\n       */\n      geoJson?: false;\n      /**\n       * Attribute paths for the document's latitude and longitude values.\n       */\n      fields: [string, string];\n      /**\n       * A unique name for this index.\n       */\n      name?: string;\n    }\n  | {\n      type: \"geo\";\n      /**\n       * If set to `true`, `fields` must be an array containing a single attribute\n       * path and the attribute value must be an array with two values, the first\n       * of which will be interpreted as the longitude and the second of which will\n       * be interpreted as the latitude of the document.\n       *\n       * Default: `false`\n       */\n      geoJson?: boolean;\n      /**\n       * An array containing the attribute path for an array containing two values,\n       * the first of which will be interpreted as the latitude, the second as the\n       * longitude. If `geoJson` is set to `true`, the order is reversed to match\n       * the GeoJSON format.\n       */\n      fields: [string];\n      /**\n       * A unique name for this index.\n       */\n      name?: string;\n    };\n\n/**\n * Options for creating a fulltext index.\n */\nexport type EnsureFulltextIndexOptions = {\n  /**\n   * Type of this index.\n   */\n  type: \"fulltext\";\n  /**\n   * An array containing exactly one attribute path.\n   */\n  fields: [string];\n  /**\n   * A unique name for this index.\n   */\n  name?: string;\n  /**\n   * Minimum character length of words to index.\n   */\n  minLength?: number;\n};\n\n/**\n * Options for creating a TTL index.\n */\nexport type EnsureTtlIndexOptions = {\n  /**\n   * Type of this index.\n   */\n  type: \"ttl\";\n  /**\n   * An array containing exactly one attribute path.\n   */\n  fields: [string];\n  /**\n   * A unique name for this index.\n   */\n  name?: string;\n  /**\n   * Duration in seconds after the attribute value at which the document will\n   * be considered as expired.\n   */\n  expireAfter: number;\n};\n\n/**\n * Shared attributes of all index types.\n */\nexport type GenericIndex = {\n  /**\n   * A unique name for this index.\n   */\n  name?: string;\n  /**\n   * A unique identifier for this index.\n   */\n  id: string;\n  /**\n   * Whether documents not containing at least one of the attribute paths\n   * are omitted by this index.\n   */\n  sparse: boolean;\n  /**\n   * Whether this index enforces uniqueness for values of its attribute paths.\n   */\n  unique: boolean;\n};\n\n/**\n * An object representing a persistent index.\n */\nexport type PersistentIndex = GenericIndex & {\n  type: \"persistent\";\n  fields: string[];\n};\n\n/**\n * An object representing a skiplist index.\n */\nexport type SkiplistIndex = GenericIndex & {\n  type: \"skiplist\";\n  fields: string[];\n};\n\n/**\n * An object representing a hash index.\n */\nexport type HashIndex = GenericIndex & {\n  type: \"hash\";\n  fields: string[];\n  selectivityEstimate: number;\n};\n\n/**\n * An object representing a primary index.\n */\nexport type PrimaryIndex = GenericIndex & {\n  type: \"primary\";\n  fields: string[];\n  selectivityEstimate: number;\n};\n\n/**\n * An object representing a fulltext index.\n */\nexport type FulltextIndex = GenericIndex & {\n  type: \"fulltext\";\n  fields: [string];\n  minLength: number;\n};\n\n/**\n * An object representing a geo index.\n */\nexport type GeoIndex = GenericIndex & {\n  type: \"geo\";\n  fields: [string] | [string, string];\n  geoJson: boolean;\n  bestIndexedLevel: number;\n  worstIndexedLevel: number;\n  maxNumCoverCells: number;\n};\n\n/**\n * An object representing a TTL index.\n */\nexport type TtlIndex = GenericIndex & {\n  type: \"ttl\";\n  fields: [string];\n  expireAfter: number;\n  selectivityEstimate: number;\n};\n\n/**\n * An object representing an index.\n */\nexport type Index =\n  | GeoIndex\n  | FulltextIndex\n  | PersistentIndex\n  | PrimaryIndex\n  | HashIndex\n  | SkiplistIndex\n  | TtlIndex;\n\nexport type ObjectWithId = {\n  [key: string]: any;\n  id: string;\n};\n\nexport type ObjectWithName = {\n  [key: string]: any;\n  name: string;\n};\n\n/**\n * Index name, id or object with a `name` or `id` property.\n */\nexport type IndexSelector = ObjectWithId | ObjectWithName | string;\n\n/**\n * @internal\n * @hidden\n */\nexport function _indexHandle(\n  selector: IndexSelector,\n  collectionName: string\n): string {\n  if (typeof selector !== \"string\") {\n    if (selector.id) {\n      return _indexHandle(selector.id, collectionName);\n    }\n    throw new Error(\n      \"Index handle must be a string or an object with an id attribute\"\n    );\n  }\n  if (selector.includes(\"/\")) {\n    if (!selector.startsWith(`${collectionName}/`)) {\n      throw new Error(\n        `Index ID \"${selector}\" does not match collection name \"${collectionName}\"`\n      );\n    }\n    return selector;\n  }\n  return `${collectionName}/${selector}`;\n}\n"]}