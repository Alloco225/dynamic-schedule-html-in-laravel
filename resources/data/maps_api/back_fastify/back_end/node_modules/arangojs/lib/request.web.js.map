{"version":3,"file":"request.web.js","sourceRoot":"","sources":["../../src/lib/request.web.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG;;;AAEH,6BAA6D;AAE7D,iCAA8B;AAE9B,yCAAsC;AACtC,iCAA8B;AAM9B,+BAAwB;AAEX,QAAA,SAAS,GAAG,IAAI,CAAC;AAE9B;;;;;;;;;;;GAWG;AACH,SAAgB,aAAa,CAC3B,OAAe,EACf,YAA8C;IAE9C,MAAM,EAAE,IAAI,EAAE,GAAG,YAAY,EAAE,GAAG,WAAQ,CAAC,OAAO,CAAC,CAAC;IACpD,MAAM,OAAO,GAAG,WAAI,CAAC,YAAY,EAAE,CAAC,YAAY,CAAC,CAAC,CAAC;IACnD,OAAO,SAAS,OAAO,CACrB,EAAE,MAAM,EAAE,GAAG,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,YAAY,EAAkB,EACrE,EAA6B;QAE7B,MAAM,QAAQ,GAAG;YACf,GAAG,YAAY;YACf,QAAQ,EAAE,GAAG,CAAC,QAAQ;gBACpB,CAAC,CAAC,YAAY,CAAC,QAAQ;oBACrB,CAAC,CAAC,mBAAQ,CAAC,YAAY,CAAC,QAAQ,EAAE,GAAG,CAAC,QAAQ,CAAC;oBAC/C,CAAC,CAAC,GAAG,CAAC,QAAQ;gBAChB,CAAC,CAAC,YAAY,CAAC,QAAQ;YACzB,MAAM,EAAE,GAAG,CAAC,MAAM;gBAChB,CAAC,CAAC,YAAY,CAAC,MAAM;oBACnB,CAAC,CAAC,GAAG,YAAY,CAAC,MAAM,IAAI,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE;oBACjD,CAAC,CAAC,GAAG,CAAC,MAAM;gBACd,CAAC,CAAC,YAAY,CAAC,MAAM;SACxB,CAAC;QACF,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,EAAE;YAC7B,OAAO,CAAC,eAAe,CAAC,GAAG,SAAS,WAAI,CAAC,IAAI,IAAI,OAAO,CAAC,EAAE,CAAC;SAC7D;QAED,IAAI,QAAQ,GAA8B,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;YACrD,QAAQ,GAAG,GAAG,EAAE,CAAC,SAAS,CAAC;YAC3B,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QACf,CAAC,CAAC;QACF,MAAM,GAAG,GAAG,aAAG,CACb;YACE,MAAM,EAAE,IAAI;YACZ,eAAe,EAAE,IAAI;YACrB,GAAG,OAAO;YACV,YAAY,EAAE,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM;YAC5C,GAAG,EAAE,YAAS,CAAC,QAAQ,CAAC;YACxB,IAAI;YACJ,MAAM;YACN,OAAO;YACP,OAAO;SACR,EACD,CAAC,GAAiB,EAAE,GAAS,EAAE,EAAE;YAC/B,IAAI,CAAC,GAAG,EAAE;gBACR,MAAM,QAAQ,GAAG,GAAuB,CAAC;gBACzC,QAAQ,CAAC,OAAO,GAAG,GAAG,CAAC;gBACvB,IAAI,CAAC,QAAQ,CAAC,IAAI;oBAAE,QAAQ,CAAC,IAAI,GAAG,EAAE,CAAC;gBACvC,IAAI,OAAO,CAAC,KAAK,EAAE;oBACjB,OAAO,CAAC,KAAK,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;iBAC/B;gBACD,QAAQ,CAAC,IAAI,EAAE,QAA4B,CAAC,CAAC;aAC9C;iBAAM;gBACL,MAAM,KAAK,GAAG,GAAoB,CAAC;gBACnC,KAAK,CAAC,OAAO,GAAG,GAAG,CAAC;gBACpB,IAAI,OAAO,CAAC,KAAK,EAAE;oBACjB,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;iBACtB;gBACD,QAAQ,CAAC,KAAK,CAAC,CAAC;aACjB;QACH,CAAC,CACF,CAAC;QACF,IAAI,OAAO,CAAC,MAAM,EAAE;YAClB,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;SACrB;IACH,CAAC,CAAC;AACJ,CAAC;AAlED,sCAkEC","sourcesContent":["/**\n * Node.js implementation of the HTTP(S) request function.\n *\n * @packageDocumentation\n * @internal\n * @hidden\n */\n\nimport { format as formatUrl, parse as parseUrl } from \"url\";\nimport { RequestInterceptors, XhrOptions } from \"../connection\";\nimport { btoa } from \"./btoa\";\nimport { Errback } from \"./errback\";\nimport { joinPath } from \"./joinPath\";\nimport { omit } from \"./omit\";\nimport {\n  ArangojsError,\n  ArangojsResponse,\n  RequestOptions,\n} from \"./request.node\";\nimport xhr from \"./xhr\";\n\nexport const isBrowser = true;\n\n/**\n * Create a function for performing requests against a given host.\n *\n * @param baseUrl - Base URL of the host, i.e. protocol, port and domain name.\n * @param agentOptions - Options to use for performing requests.\n *\n * @param baseUrl\n * @param agentOptions\n *\n * @internal\n * @hidden\n */\nexport function createRequest(\n  baseUrl: string,\n  agentOptions: XhrOptions & RequestInterceptors\n) {\n  const { auth, ...baseUrlParts } = parseUrl(baseUrl);\n  const options = omit(agentOptions, [\"maxSockets\"]);\n  return function request(\n    { method, url, headers, body, timeout, expectBinary }: RequestOptions,\n    cb: Errback<ArangojsResponse>\n  ) {\n    const urlParts = {\n      ...baseUrlParts,\n      pathname: url.pathname\n        ? baseUrlParts.pathname\n          ? joinPath(baseUrlParts.pathname, url.pathname)\n          : url.pathname\n        : baseUrlParts.pathname,\n      search: url.search\n        ? baseUrlParts.search\n          ? `${baseUrlParts.search}&${url.search.slice(1)}`\n          : url.search\n        : baseUrlParts.search,\n    };\n    if (!headers[\"authorization\"]) {\n      headers[\"authorization\"] = `Basic ${btoa(auth || \"root:\")}`;\n    }\n\n    let callback: Errback<ArangojsResponse> = (err, res) => {\n      callback = () => undefined;\n      cb(err, res);\n    };\n    const req = xhr(\n      {\n        useXDR: true,\n        withCredentials: true,\n        ...options,\n        responseType: expectBinary ? \"blob\" : \"text\",\n        url: formatUrl(urlParts),\n        body,\n        method,\n        headers,\n        timeout,\n      },\n      (err: Error | null, res?: any) => {\n        if (!err) {\n          const response = res as ArangojsResponse;\n          response.request = req;\n          if (!response.body) response.body = \"\";\n          if (options.after) {\n            options.after(null, response);\n          }\n          callback(null, response as ArangojsResponse);\n        } else {\n          const error = err as ArangojsError;\n          error.request = req;\n          if (options.after) {\n            options.after(error);\n          }\n          callback(error);\n        }\n      }\n    );\n    if (options.before) {\n      options.before(req);\n    }\n  };\n}\n"]}