{"version":3,"file":"connection.js","sourceRoot":"","sources":["../src/connection.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * ```ts\n * import type { Config } from \"arangojs/connection\";\n * ```\n *\n * The \"connection\" module provides connection and configuration related types\n * for TypeScript.\n *\n * @packageDocumentation\n */\nimport { ClientRequest } from \"http\";\nimport { AgentOptions as NodeAgentOptions } from \"https\";\nimport { stringify as querystringify } from \"querystring\";\nimport { LinkedList } from \"x3-linkedlist\";\nimport { Database } from \"./database\";\nimport {\n  ArangoError,\n  HttpError,\n  isArangoErrorResponse,\n  isSystemError,\n} from \"./error\";\nimport { btoa } from \"./lib/btoa\";\nimport { Errback } from \"./lib/errback\";\nimport { normalizeUrl } from \"./lib/normalizeUrl\";\nimport {\n  ArangojsError,\n  ArangojsResponse,\n  createRequest,\n  isBrowser,\n  RequestFunction,\n} from \"./lib/request\";\n\nconst MIME_JSON = /\\/(json|javascript)(\\W|$)/;\nconst LEADER_ENDPOINT_HEADER = \"x-arango-endpoint\";\n\n/**\n * Generic type representing an object with values of a given value type.\n *\n * @param T - Type of the object's property values.\n */\nexport type Dict<T> = { [key: string]: T };\n\n/**\n * Determines the behavior when multiple URLs are used:\n *\n * - `\"NONE\"`: No load balancing. All requests will be handled by the first\n *   URL in the list until a network error is encountered. On network error,\n *   arangojs will advance to using the next URL in the list.\n *\n * - `\"ONE_RANDOM\"`: Randomly picks one URL from the list initially, then\n *   behaves like `\"NONE\"`.\n *\n * - `\"ROUND_ROBIN\"`: Every sequential request uses the next URL in the list.\n */\nexport type LoadBalancingStrategy = \"NONE\" | \"ROUND_ROBIN\" | \"ONE_RANDOM\";\n\n/**\n * An arbitrary object with string values representing HTTP headers and their\n * values.\n *\n * Header names should always be lowercase.\n */\nexport type Headers = Dict<string>;\n\n/**\n * An arbitrary object with scalar values representing query string parameters\n * and their values.\n */\nexport type Params = Dict<any>;\n\n/**\n * Generic properties shared by all ArangoDB HTTP API responses.\n */\nexport type ArangoResponseMetadata = {\n  /**\n   * Indicates that the request was successful.\n   */\n  error: false;\n  /**\n   * Response status code, typically `200`.\n   */\n  code: number;\n};\n\nfunction clean<T>(obj: T) {\n  const result = {} as typeof obj;\n  for (const key of Object.keys(obj)) {\n    const value = (obj as any)[key];\n    if (value === undefined) continue;\n    (result as any)[key] = value;\n  }\n  return result;\n}\n\n/**\n * Credentials for HTTP Basic authentication.\n */\nexport type BasicAuthCredentials = {\n  /**\n   * Username to use for authentication, e.g. `\"root\"`.\n   */\n  username: string;\n  /**\n   * Password to use for authentication. Defaults to an empty string.\n   */\n  password?: string;\n};\n\n/**\n * Credentials for HTTP Bearer token authentication.\n */\nexport type BearerAuthCredentials = {\n  /**\n   * Bearer token to use for authentication.\n   */\n  token: string;\n};\n\nfunction isBearerAuth(auth: any): auth is BearerAuthCredentials {\n  return auth.hasOwnProperty(\"token\");\n}\n\n/**\n * @internal\n * @hidden\n */\nfunction generateStackTrace() {\n  let err = new Error();\n  if (!err.stack) {\n    try {\n      throw err;\n    } catch (e) {\n      err = e;\n    }\n  }\n  return err;\n}\n\n/**\n * @internal\n * @hidden\n */\ntype UrlInfo = {\n  absolutePath?: boolean;\n  basePath?: string;\n  path?: string;\n  qs?: string | Params;\n};\n\n/**\n * Options of the `xhr` module that can be set using `agentOptions` when using\n * arangojs in the browser. Additionally `maxSockets` can be used to control\n * the maximum number of parallel requests.\n *\n * See also: {@link https://www.npmjs.com/package/xhr | `xhr` on npm }.\n */\nexport type XhrOptions = {\n  /**\n   * Maximum number of parallel requests arangojs will perform. If any\n   * additional requests are attempted, they will be enqueued until one of the\n   * active requests has completed.\n   */\n  maxSockets?: number;\n  /**\n   * Number of milliseconds to wait for a response.\n   *\n   * Default: `0` (disabled)\n   */\n  timeout?: number;\n  /**\n   * Callback that will be invoked immediately before the `send` method of the\n   * request is called.\n   *\n   * See also {@link RequestInterceptors}.\n   */\n  beforeSend?: (xhrObject: any) => void;\n  /**\n   * `XMLHttpRequest` object to use instead of the native implementation.\n   */\n  xhr?: any;\n  /**\n   * (Internet Explorer 10 and lower only.) Whether `XDomainRequest` should be\n   * used instead of `XMLHttpRequest`. Only required for performing\n   * cross-domain requests in older versions of Internet Explorer.\n   */\n  useXdr?: boolean;\n  /**\n   * Specifies whether browser credentials (e.g. cookies) should be sent if\n   * performing a cross-domain request.\n   *\n   * See {@link https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/withCredentials | `XMLHttpRequest.withCredentials`}.\n   */\n  withCredentials?: boolean;\n};\n\n/**\n * Additional options for intercepting the request/response. These methods\n * are primarily intended for tracking network related metrics.\n */\nexport type RequestInterceptors = {\n  /**\n   * Callback that will be invoked with the finished request object before it\n   * is finalized. In the browser the request may already have been sent.\n   *\n   * @param req - Request object or XHR instance used for this request.\n   */\n  before?: (req: ClientRequest) => void;\n  /**\n   * Callback that will be invoked when the server response has been received\n   * and processed or when the request has been failed without a response.\n   *\n   * The originating request will be available as the `request` property\n   * on either the error or response object.\n   *\n   * @param err - Error encountered when handling this request or `null`.\n   * @param res - Response object for this request, if no error occurred.\n   */\n  after?: (err: ArangojsError | null, res?: ArangojsResponse) => void;\n};\n\n/**\n * Options for performing a request with arangojs.\n */\nexport type RequestOptions = {\n  /**\n   * @internal\n   *\n   * Identifier of a specific ArangoDB host to use when more than one is known.\n   */\n  host?: number;\n  /**\n   * HTTP method to use in order to perform the request.\n   *\n   * Default: `\"GET\"`\n   */\n  method?: string;\n  /**\n   * Request body data.\n   */\n  body?: any;\n  /**\n   * If set to `true`, the response body will not be interpreted as JSON and\n   * instead passed as-is.\n   */\n  expectBinary?: boolean;\n  /**\n   * If set to `true`, the request body will not be converted to JSON and\n   * instead passed as-is.\n   */\n  isBinary?: boolean;\n  /**\n   * Whether ArangoDB is allowed to perform a dirty read to respond to this\n   * request. If set to `true`, the response may reflect a dirty state from\n   * a non-authoritative server.\n   */\n  allowDirtyRead?: boolean;\n  /**\n   * HTTP headers to pass along with this request in addition to the default\n   * headers generated by arangojs.\n   */\n  headers?: Headers;\n  /**\n   * Time in milliseconds after which arangojs will abort the request if the\n   * socket has not already timed out.\n   *\n   * See also `agentOptions.timeout` in {@link Config}.\n   */\n  timeout?: number;\n  /**\n   * Optional prefix path to prepend to the `path`.\n   */\n  basePath?: string;\n  /**\n   * URL path, relative to the `basePath` and server domain.\n   */\n  path?: string;\n  /**\n   * URL parameters to pass as part of the query string.\n   */\n  qs?: string | Params;\n};\n\n/**\n * @internal\n * @hidden\n */\ntype Task = {\n  host?: number;\n  stack?: () => string;\n  allowDirtyRead: boolean;\n  resolve: Function;\n  reject: Function;\n  retries: number;\n  options: {\n    method: string;\n    expectBinary: boolean;\n    timeout?: number;\n    url: { pathname: string; search?: string };\n    headers: Headers;\n    body: any;\n  };\n};\n\n/**\n * Options for creating the Node.js `http.Agent` or `https.Agent`.\n *\n * In browser environments this option can be used to pass additional options\n * to the underlying calls of the\n * {@link https://www.npmjs.com/package/xhr | xhr module}.\n *\n * See also {@link https://nodejs.org/api/http.html#http_new_agent_options | `http.Agent`}\n * and {@link https://nodejs.org/api/https.html#https_new_agent_options | `https.Agent`}\n * (when using TLS).\n */\nexport type AgentOptions = NodeAgentOptions | XhrOptions;\n\n/**\n * Options for configuring arangojs.\n */\nexport type Config = {\n  /**\n   * Name of the database to use.\n   *\n   * Default: `\"_system\"`\n   */\n  databaseName?: string;\n  /**\n   * Base URL of the ArangoDB server or list of server URLs.\n   *\n   * When working with a cluster or a single server with leader/follower\n   * failover, the method {@link Database.acquireHostList} can be used to\n   * automatically pick up additional coordinators/followers at any point.\n   *\n   * When running ArangoDB on a unix socket, e.g. `/tmp/arangodb.sock`, the\n   * following URL formats are supported for unix sockets:\n   *\n   * - `unix:///tmp/arangodb.sock` (no SSL)\n   * - `http+unix:///tmp/arangodb.sock` (or `https+unix://` for SSL)\n   * - `http://unix:/tmp/arangodb.sock` (or `https://unix:` for SSL)\n   *\n   * Additionally `ssl` and `tls` are treated as synonymous with `https` and\n   * `tcp` is treated as synonymous with `http`, so the following URLs are\n   * considered identical:\n   *\n   * - `tcp://localhost:8529` and `http://localhost:8529`\n   * - `ssl://localhost:8529` and `https://localhost:8529`\n   * - `tcp+unix:///tmp/arangodb.sock` and `http+unix:///tmp/arangodb.sock`\n   * - `ssl+unix:///tmp/arangodb.sock` and `https+unix:///tmp/arangodb.sock`\n   * - `tcp://unix:/tmp/arangodb.sock` and `http://unix:/tmp/arangodb.sock`\n   * - `ssl://unix:/tmp/arangodb.sock` and `https://unix:/tmp/arangodb.sock`\n   *\n   * See also `auth` for passing authentication credentials.\n   *\n   * Default: `\"http://localhost:8529\"`\n   */\n  url?: string | string[];\n  /**\n   * Credentials to use for authentication.\n   *\n   * See also {@link Database.useBasicAuth} and {@link Database.useBearerAuth}.\n   *\n   * Default: `{ username: \"root\", password: \"\" }`\n   */\n  auth?: BasicAuthCredentials | BearerAuthCredentials;\n  /**\n   * Numeric representation of the ArangoDB version the driver should expect.\n   * The format is defined as `XYYZZ` where `X` is the major version, `Y` is\n   * the zero-filled two-digit minor version and `Z` is the zero-filled two-digit\n   * bugfix version, e.g. `30102` for 3.1.2, `20811` for 2.8.11.\n   *\n   * Depending on this value certain methods may become unavailable or change\n   * their behavior to remain compatible with different versions of ArangoDB.\n   *\n   * Default: `30400`\n   */\n  arangoVersion?: number;\n  /**\n   * Determines the behavior when multiple URLs are provided:\n   *\n   * - `\"NONE\"`: No load balancing. All requests will be handled by the first\n   *   URL in the list until a network error is encountered. On network error,\n   *   arangojs will advance to using the next URL in the list.\n   *\n   * - `\"ONE_RANDOM\"`: Randomly picks one URL from the list initially, then\n   *   behaves like `\"NONE\"`.\n   *\n   * - `\"ROUND_ROBIN\"`: Every sequential request uses the next URL in the list.\n   *\n   * Default: `\"NONE\"`\n   */\n  loadBalancingStrategy?: LoadBalancingStrategy;\n  /**\n   * Determines the behavior when a request fails because the underlying\n   * connection to the server could not be opened\n   * (i.e. {@link https://nodejs.org/api/errors.html#errors_common_system_errors | `ECONNREFUSED` in Node.js}):\n   *\n   * - `false`: the request fails immediately.\n   *\n   * - `0`: the request is retried until a server can be reached but only a\n   *   total number of times matching the number of known servers (including\n   *   the initial failed request).\n   *\n   * - any other number: the request is retried until a server can be reached\n   *   the request has been retried a total of `maxRetries` number of times\n   *   (not including the initial failed request).\n   *\n   * When working with a single server without leader/follower failover, the\n   * retries (if any) will be made to the same server.\n   *\n   * This setting currently has no effect when using arangojs in a browser.\n   *\n   * **Note**: Requests bound to a specific server (e.g. fetching query results)\n   * will never be retried automatically and ignore this setting.\n   *\n   * Default: `0`\n   */\n  maxRetries?: false | number;\n  /**\n   * An http `Agent` instance to use for connections.\n   *\n   * By default a new `Agent` instance will be created using the `agentOptions`.\n   *\n   * This option has no effect when using the browser version of arangojs.\n   *\n   * See also: {@link https://nodejs.org/api/http.html#http_new_agent_options | `http.Agent`}\n   * and {@link https://nodejs.org/api/https.html#https_new_agent_options | `https.Agent`}\n   * (when using TLS).\n   */\n  agent?: any;\n  /**\n   * Options used to create that underlying HTTP/HTTPS `Agent` (or the `xhr`\n   * module when using arangojs in the browser). This will be ignored if\n   * `agent` is also provided.\n   *\n   * The option `maxSockets` is also used to limit how many requests\n   * arangojs will perform concurrently. The maximum number of requests is\n   * equal to `maxSockets`.\n   *\n   * **Note:** arangojs will limit the number of concurrent requests based on\n   * this value even if an `agent` is provided.\n   *\n   * **Note:** when using `ROUND_ROBIN` load balancing and passing an array of\n   * URLs in the `url` option, the default value of `maxSockets` will be set\n   * to `3 * url.length` instead of `3`.\n   *\n   * Default (Node.js): `{ maxSockets: 3, keepAlive: true, keepAliveMsecs: 1000 }`\n   *\n   * Default (browser): `{ maxSockets: 3, useXDR: true, withCredentials: true }`\n   */\n  agentOptions?: AgentOptions & RequestInterceptors;\n  /**\n   * An object with additional headers to send with every request.\n   *\n   * If an `\"authorization\"` header is provided, it will be overridden when\n   * using {@link Database.useBasicAuth}, {@link Database.useBearerAuth} or\n   * the `auth` configuration option.\n   */\n  headers?: Headers;\n  /**\n   * If set to `true`, arangojs will generate stack traces every time a request\n   * is initiated and augment the stack traces of any errors it generates.\n   *\n   * **Warning**: This will cause arangojs to generate stack traces in advance\n   * even if the request does not result in an error. Generating stack traces\n   * may negatively impact performance.\n   */\n  precaptureStackTraces?: boolean;\n};\n\n/**\n * Indicates whether the given value represents a {@link Connection}.\n *\n * @param connection - A value that might be a connection.\n *\n * @internal\n * @hidden\n */\nexport function isArangoConnection(connection: any): connection is Connection {\n  return Boolean(connection && connection.isArangoConnection);\n}\n\n/**\n * Represents a connection pool shared by one or more databases.\n *\n * @internal\n * @hidden\n */\nexport class Connection {\n  protected _activeTasks: number = 0;\n  protected _agent?: any;\n  protected _agentOptions: { [key: string]: any };\n  protected _arangoVersion: number = 30400;\n  protected _headers: Headers;\n  protected _loadBalancingStrategy: LoadBalancingStrategy;\n  protected _useFailOver: boolean;\n  protected _shouldRetry: boolean;\n  protected _maxRetries: number;\n  protected _maxTasks: number;\n  protected _queue = new LinkedList<Task>();\n  protected _databases = new Map<string, Database>();\n  protected _hosts: RequestFunction[] = [];\n  protected _urls: string[] = [];\n  protected _activeHost: number;\n  protected _activeDirtyHost: number;\n  protected _transactionId: string | null = null;\n  protected _precaptureStackTraces: boolean;\n\n  /**\n   * @internal\n   *\n   * Creates a new `Connection` instance.\n   *\n   * @param config - An object with configuration options.\n   *\n   * @hidden\n   */\n  constructor(config: Omit<Config, \"databaseName\"> = {}) {\n    const URLS = config.url\n      ? Array.isArray(config.url)\n        ? config.url\n        : [config.url]\n      : [\"http://localhost:8529\"];\n    const MAX_SOCKETS =\n      3 * (config.loadBalancingStrategy === \"ROUND_ROBIN\" ? URLS.length : 1);\n\n    if (config.arangoVersion !== undefined) {\n      this._arangoVersion = config.arangoVersion;\n    }\n    this._agent = config.agent;\n    this._agentOptions = isBrowser\n      ? { maxSockets: MAX_SOCKETS, ...config.agentOptions }\n      : {\n          maxSockets: MAX_SOCKETS,\n          keepAlive: true,\n          keepAliveMsecs: 1000,\n          scheduling: \"lifo\",\n          ...config.agentOptions,\n        };\n    this._maxTasks = this._agentOptions.maxSockets;\n    this._headers = { ...config.headers };\n    this._loadBalancingStrategy = config.loadBalancingStrategy ?? \"NONE\";\n    this._useFailOver = this._loadBalancingStrategy !== \"ROUND_ROBIN\";\n    this._precaptureStackTraces = Boolean(config.precaptureStackTraces);\n    if (config.maxRetries === false) {\n      this._shouldRetry = false;\n      this._maxRetries = 0;\n    } else {\n      this._shouldRetry = true;\n      this._maxRetries = config.maxRetries ?? 0;\n    }\n\n    this.addToHostList(URLS);\n\n    if (config.auth) {\n      if (isBearerAuth(config.auth)) {\n        this.setBearerAuth(config.auth);\n      } else {\n        this.setBasicAuth(config.auth);\n      }\n    }\n\n    if (this._loadBalancingStrategy === \"ONE_RANDOM\") {\n      this._activeHost = Math.floor(Math.random() * this._hosts.length);\n      this._activeDirtyHost = Math.floor(Math.random() * this._hosts.length);\n    } else {\n      this._activeHost = 0;\n      this._activeDirtyHost = 0;\n    }\n  }\n\n  /**\n   * @internal\n   *\n   * Indicates that this object represents an ArangoDB connection.\n   */\n  get isArangoConnection(): true {\n    return true;\n  }\n\n  protected _runQueue() {\n    if (!this._queue.length || this._activeTasks >= this._maxTasks) return;\n    const task = this._queue.shift()!;\n    let host = this._activeHost;\n    if (task.host !== undefined) {\n      host = task.host;\n    } else if (task.allowDirtyRead) {\n      host = this._activeDirtyHost;\n      this._activeDirtyHost = (this._activeDirtyHost + 1) % this._hosts.length;\n      task.options.headers[\"x-arango-allow-dirty-read\"] = \"true\";\n    } else if (this._loadBalancingStrategy === \"ROUND_ROBIN\") {\n      this._activeHost = (this._activeHost + 1) % this._hosts.length;\n    }\n    this._activeTasks += 1;\n    const callback: Errback<ArangojsResponse> = (err, res) => {\n      this._activeTasks -= 1;\n      if (err) {\n        if (\n          !task.allowDirtyRead &&\n          this._hosts.length > 1 &&\n          this._activeHost === host &&\n          this._useFailOver\n        ) {\n          this._activeHost = (this._activeHost + 1) % this._hosts.length;\n        }\n        if (\n          !task.host &&\n          this._shouldRetry &&\n          task.retries < (this._maxRetries || this._hosts.length - 1) &&\n          isSystemError(err) &&\n          err.syscall === \"connect\" &&\n          err.code === \"ECONNREFUSED\"\n        ) {\n          task.retries += 1;\n          this._queue.push(task);\n        } else {\n          if (task.stack) {\n            err.stack += task.stack();\n          }\n          task.reject(err);\n        }\n      } else {\n        const response = res!;\n        if (\n          response.statusCode === 503 &&\n          response.headers[LEADER_ENDPOINT_HEADER]\n        ) {\n          const url = response.headers[LEADER_ENDPOINT_HEADER]!;\n          const [index] = this.addToHostList(url);\n          task.host = index;\n          if (this._activeHost === host) {\n            this._activeHost = index;\n          }\n          this._queue.push(task);\n        } else {\n          response.arangojsHostId = host;\n          task.resolve(response);\n        }\n      }\n      this._runQueue();\n    };\n    try {\n      this._hosts[host](task.options, callback);\n    } catch (e) {\n      callback(e);\n    }\n  }\n\n  protected _buildUrl({ basePath, path, qs }: UrlInfo) {\n    const pathname = `${basePath || \"\"}${path || \"\"}`;\n    let search;\n    if (qs) {\n      if (typeof qs === \"string\") search = `?${qs}`;\n      else search = `?${querystringify(clean(qs))}`;\n    }\n    return search ? { pathname, search } : { pathname };\n  }\n\n  setBearerAuth(auth: BearerAuthCredentials) {\n    this.setHeader(\"authorization\", `Bearer ${auth.token}`);\n  }\n\n  setBasicAuth(auth: BasicAuthCredentials) {\n    this.setHeader(\n      \"authorization\",\n      `Basic ${btoa(`${auth.username}:${auth.password}`)}`\n    );\n  }\n\n  /**\n   * @internal\n   *\n   * Fetches a {@link Database} instance for the given database name from the\n   * internal cache, if available.\n   *\n   * @param databaseName - Name of the database.\n   */\n  database(databaseName: string): Database | undefined;\n  /**\n   * @internal\n   *\n   * Adds a {@link Database} instance for the given database name to the\n   * internal cache.\n   *\n   * @param databaseName - Name of the database.\n   * @param database - Database instance to add to the cache.\n   */\n  database(databaseName: string, database: Database): Database;\n  /**\n   * @internal\n   *\n   * Clears any {@link Database} instance stored for the given database name\n   * from the internal cache, if present.\n   *\n   * @param databaseName - Name of the database.\n   * @param database - Must be `null`.\n   */\n  database(databaseName: string, database: null): undefined;\n  database(\n    databaseName: string,\n    database?: Database | null\n  ): Database | undefined {\n    if (database === null) {\n      this._databases.delete(databaseName);\n      return undefined;\n    }\n    if (!database) {\n      return this._databases.get(databaseName);\n    }\n    this._databases.set(databaseName, database);\n    return database;\n  }\n\n  /**\n   * @internal\n   *\n   * Adds the given URL or URLs to the host list.\n   *\n   * See {@link Connection.acquireHostList}.\n   *\n   * @param urls - URL or URLs to add.\n   */\n  addToHostList(urls: string | string[]): number[] {\n    const cleanUrls = (Array.isArray(urls) ? urls : [urls]).map((url) =>\n      normalizeUrl(url)\n    );\n    const newUrls = cleanUrls.filter((url) => this._urls.indexOf(url) === -1);\n    this._urls.push(...newUrls);\n    this._hosts.push(\n      ...newUrls.map((url: string) =>\n        createRequest(url, this._agentOptions, this._agent)\n      )\n    );\n    return cleanUrls.map((url) => this._urls.indexOf(url));\n  }\n\n  /**\n   * @internal\n   *\n   * Sets the connection's active `transactionId`.\n   *\n   * While set, all requests will use this ID, ensuring the requests are executed\n   * within the transaction if possible. Setting the ID manually may cause\n   * unexpected behavior.\n   *\n   * See also {@link Connection.clearTransactionId}.\n   *\n   * @param transactionId - ID of the active transaction.\n   */\n  setTransactionId(transactionId: string) {\n    this._transactionId = transactionId;\n  }\n\n  /**\n   * @internal\n   *\n   * Clears the connection's active `transactionId`.\n   */\n  clearTransactionId() {\n    this._transactionId = null;\n  }\n\n  /**\n   * @internal\n   *\n   * Sets the header `headerName` with the given `value` or clears the header if\n   * `value` is `null`.\n   *\n   * @param headerName - Name of the header to set.\n   * @param value - Value of the header.\n   */\n  setHeader(headerName: string, value: string | null) {\n    if (value === null) {\n      delete this._headers[headerName];\n    } else {\n      this._headers[headerName] = value;\n    }\n  }\n\n  /**\n   * @internal\n   *\n   * Closes all open connections.\n   *\n   * See {@link Database.close}.\n   */\n  close() {\n    for (const host of this._hosts) {\n      if (host.close) host.close();\n    }\n  }\n\n  /**\n   * @internal\n   *\n   * Waits for propagation.\n   *\n   * See {@link Database.waitForPropagation}.\n   *\n   * @param request - Request to perform against each coordinator.\n   * @param timeout - Maximum number of milliseconds to wait for propagation.\n   */\n  async waitForPropagation(request: RequestOptions, timeout = Infinity) {\n    const numHosts = this._hosts.length;\n    const propagated = [] as number[];\n    const started = Date.now();\n    let host = 0;\n    while (true) {\n      if (propagated.length === numHosts) {\n        return;\n      }\n      while (propagated.includes(host)) {\n        host = (host + 1) % numHosts;\n      }\n      try {\n        await this.request({ ...request, host });\n      } catch (e) {\n        if (started + timeout < Date.now()) {\n          throw e;\n        }\n        await new Promise((resolve) => setTimeout(resolve, 1000));\n        continue;\n      }\n      if (!propagated.includes(host)) {\n        propagated.push(host);\n      }\n    }\n  }\n\n  /**\n   * @internal\n   *\n   * Performs a request using the arangojs connection pool.\n   */\n  request<T = ArangojsResponse>(\n    {\n      host,\n      method = \"GET\",\n      body,\n      expectBinary = false,\n      isBinary = false,\n      allowDirtyRead = false,\n      timeout = 0,\n      headers,\n      ...urlInfo\n    }: RequestOptions,\n    transform?: (res: ArangojsResponse) => T\n  ): Promise<T> {\n    return new Promise((resolve, reject) => {\n      let contentType = \"text/plain\";\n      if (isBinary) {\n        contentType = \"application/octet-stream\";\n      } else if (body) {\n        if (typeof body === \"object\") {\n          body = JSON.stringify(body);\n          contentType = \"application/json\";\n        } else {\n          body = String(body);\n        }\n      }\n\n      const extraHeaders: Headers = {\n        ...this._headers,\n        \"content-type\": contentType,\n        \"x-arango-version\": String(this._arangoVersion),\n      };\n\n      if (this._transactionId) {\n        extraHeaders[\"x-arango-trx-id\"] = this._transactionId;\n      }\n\n      const task: Task = {\n        retries: 0,\n        host,\n        allowDirtyRead,\n        options: {\n          url: this._buildUrl(urlInfo),\n          headers: { ...extraHeaders, ...headers },\n          timeout,\n          method,\n          expectBinary,\n          body,\n        },\n        reject,\n        resolve: (res: ArangojsResponse) => {\n          const contentType = res.headers[\"content-type\"];\n          let parsedBody: any = undefined;\n          if (res.body.length && contentType && contentType.match(MIME_JSON)) {\n            try {\n              parsedBody = res.body;\n              parsedBody = JSON.parse(parsedBody);\n            } catch (e) {\n              if (!expectBinary) {\n                if (typeof parsedBody !== \"string\") {\n                  parsedBody = res.body.toString(\"utf-8\");\n                }\n                e.response = res;\n                if (task.stack) {\n                  e.stack += task.stack();\n                }\n                reject(e);\n                return;\n              }\n            }\n          } else if (res.body && !expectBinary) {\n            parsedBody = res.body.toString(\"utf-8\");\n          } else {\n            parsedBody = res.body;\n          }\n          if (isArangoErrorResponse(parsedBody)) {\n            res.body = parsedBody;\n            const err = new ArangoError(res);\n            if (task.stack) {\n              err.stack += task.stack();\n            }\n            reject(err);\n          } else if (res.statusCode && res.statusCode >= 400) {\n            res.body = parsedBody;\n            const err = new HttpError(res);\n            if (task.stack) {\n              err.stack += task.stack();\n            }\n            reject(err);\n          } else {\n            if (!expectBinary) res.body = parsedBody;\n            resolve(transform ? transform(res) : (res as any));\n          }\n        },\n      };\n\n      if (this._precaptureStackTraces) {\n        if (typeof Error.captureStackTrace === \"function\") {\n          const capture = {} as { readonly stack: string };\n          Error.captureStackTrace(capture);\n          task.stack = () =>\n            `\\n${capture.stack.split(\"\\n\").slice(3).join(\"\\n\")}`;\n        } else {\n          const capture = generateStackTrace() as { readonly stack: string };\n          if (Object.prototype.hasOwnProperty.call(capture, \"stack\")) {\n            task.stack = () =>\n              `\\n${capture.stack.split(\"\\n\").slice(4).join(\"\\n\")}`;\n          }\n        }\n      }\n\n      this._queue.push(task);\n      this._runQueue();\n    });\n  }\n}\n"]}